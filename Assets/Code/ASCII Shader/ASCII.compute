#pragma kernel CSMain

Texture2D<float4> cameraTexture;
RWTexture2D<float4> outputTexture;
Texture2DArray glyphTextures;

StructuredBuffer<float> glyphCoverages;

int textureWidth;
int textureHeight;
int numGlyphs;

float contrast;

#define GLYPH_SIZE 16

float CalculateGrayscale(float4 color)
{
    return dot(color.rgb, float3(0.299, 0.587, 0.114));
}

int FindClosestGlyph(float averageGrayscale)
{
    int res = 0;
    float closestDifference = abs(averageGrayscale - glyphCoverages[0]);
    for (int i = 1; i < numGlyphs; i++)
    {
        float diff = abs(averageGrayscale - glyphCoverages[i]);
        if (diff < closestDifference)
        {
            closestDifference = diff;
            res = i;
        }

    }
    return res;
}


groupshared float4 sharedAverageColor;
groupshared int sharedSelectedGlyph;

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint3 groupThreadId : SV_GroupThreadID)
{
    int blockX = groupId.x * GLYPH_SIZE;
    int blockY = groupId.y * GLYPH_SIZE;

    if (groupThreadId.x == 0 && groupThreadId.y == 0)
    {
        float totalGrayscale = 0.0;
        float4 averageColor = 0.0;

        for (int y = 0; y < GLYPH_SIZE; y++)
        {
            for (int x = 0; x < GLYPH_SIZE; x++)
            {
                int pixelX = blockX + x;
                int pixelY = blockY + y;

                if (pixelX < textureWidth && pixelY < textureHeight)
                {
                    float4 color = cameraTexture[int2(pixelX, pixelY)];
                    averageColor += color;
                    totalGrayscale += CalculateGrayscale(color);
                }
            }
        }
        int numPixels = GLYPH_SIZE * GLYPH_SIZE;
        float averageGrayscale = (totalGrayscale / numPixels) * (1 - contrast);
        averageColor /= numPixels;

        sharedSelectedGlyph = FindClosestGlyph(averageGrayscale);
        sharedAverageColor = averageColor;
    }

    GroupMemoryBarrierWithGroupSync();

    float4 averageColor = sharedAverageColor;
    int selectedGlyphIndex = sharedSelectedGlyph;

    int pixelX = blockX + groupThreadId.x;
    int pixelY = blockY + groupThreadId.y;

    if (pixelX < textureWidth && pixelY < textureHeight)
    {
        float4 glyphColor = glyphTextures.Load(int4(groupThreadId.x, groupThreadId.y, selectedGlyphIndex,0)) * averageColor;
        outputTexture[int2(pixelX, pixelY)] = glyphColor;
    }

}
